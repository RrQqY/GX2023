// Generated by gencpp from file test_pkg/LineSegment.msg
// DO NOT EDIT!


#ifndef TEST_PKG_MESSAGE_LINESEGMENT_H
#define TEST_PKG_MESSAGE_LINESEGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_pkg
{
template <class ContainerAllocator>
struct LineSegment_
{
  typedef LineSegment_<ContainerAllocator> Type;

  LineSegment_()
    : radius(0.0)
    , angle(0.0)
    , covariance()
    , start()
    , end()  {
      covariance.assign(0.0);

      start.assign(0.0);

      end.assign(0.0);
  }
  LineSegment_(const ContainerAllocator& _alloc)
    : radius(0.0)
    , angle(0.0)
    , covariance()
    , start()
    , end()  {
  (void)_alloc;
      covariance.assign(0.0);

      start.assign(0.0);

      end.assign(0.0);
  }



   typedef float _radius_type;
  _radius_type radius;

   typedef float _angle_type;
  _angle_type angle;

   typedef boost::array<float, 4>  _covariance_type;
  _covariance_type covariance;

   typedef boost::array<float, 2>  _start_type;
  _start_type start;

   typedef boost::array<float, 2>  _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::test_pkg::LineSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_pkg::LineSegment_<ContainerAllocator> const> ConstPtr;

}; // struct LineSegment_

typedef ::test_pkg::LineSegment_<std::allocator<void> > LineSegment;

typedef boost::shared_ptr< ::test_pkg::LineSegment > LineSegmentPtr;
typedef boost::shared_ptr< ::test_pkg::LineSegment const> LineSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_pkg::LineSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_pkg::LineSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_pkg::LineSegment_<ContainerAllocator1> & lhs, const ::test_pkg::LineSegment_<ContainerAllocator2> & rhs)
{
  return lhs.radius == rhs.radius &&
    lhs.angle == rhs.angle &&
    lhs.covariance == rhs.covariance &&
    lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_pkg::LineSegment_<ContainerAllocator1> & lhs, const ::test_pkg::LineSegment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_pkg::LineSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_pkg::LineSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_pkg::LineSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_pkg::LineSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pkg::LineSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pkg::LineSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_pkg::LineSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b798f1cd276e61d7015b3e32ccd5c78";
  }

  static const char* value(const ::test_pkg::LineSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b798f1cd276e61dULL;
  static const uint64_t static_value2 = 0x7015b3e32ccd5c78ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_pkg::LineSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_pkg/LineSegment";
  }

  static const char* value(const ::test_pkg::LineSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_pkg::LineSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 radius\n"
"float32 angle\n"
"float32[4] covariance\n"
"float32[2] start\n"
"float32[2] end\n"
;
  }

  static const char* value(const ::test_pkg::LineSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_pkg::LineSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radius);
      stream.next(m.angle);
      stream.next(m.covariance);
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_pkg::LineSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_pkg::LineSegment_<ContainerAllocator>& v)
  {
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "start[]" << std::endl;
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      s << indent << "  start[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start[i]);
    }
    s << indent << "end[]" << std::endl;
    for (size_t i = 0; i < v.end.size(); ++i)
    {
      s << indent << "  end[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.end[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_PKG_MESSAGE_LINESEGMENT_H
